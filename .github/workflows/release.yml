name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      draft:
        description: 'Create as draft release'
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  POETRY_VERSION: 1.7.1

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
      pull-requests: write
      issues: write
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Update version
        id: version
        run: |
          poetry version ${{ github.event.inputs.version_type }}
          echo "new_version=$(poetry version -s)" >> $GITHUB_OUTPUT

      - name: Get previous tag
        id: get_previous_tag
        run: |
          # Try to get the latest tag, if it fails default to empty
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "tag=$PREV_TAG" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: '.github/changelog-config.json'
          toTag: HEAD
          fromTag: ${{ steps.get_previous_tag.outputs.tag || github.event.repository.default_branch }}
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Update CHANGELOG.md
        run: |
          # Create CHANGELOG.md if it doesn't exist
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog\n\nAll notable changes to this project will be documented in this file.\n" > CHANGELOG.md
          fi

          # Create new changelog content
          echo "# Changelog" > temp_changelog.md
          echo "" >> temp_changelog.md
          echo "## [$(poetry version -s)] - $(date +%Y-%m-%d)" >> temp_changelog.md
          echo "" >> temp_changelog.md
          if [ -n "${{ steps.changelog.outputs.changelog }}" ]; then
            echo "${{ steps.changelog.outputs.changelog }}" >> temp_changelog.md
          else
            echo "- Initial release" >> temp_changelog.md
          fi
          echo "" >> temp_changelog.md

          # Append existing changelog content (skip the header)
          if [ -f CHANGELOG.md ]; then
            tail -n +2 CHANGELOG.md >> temp_changelog.md
          fi

          # Replace the old changelog
          mv temp_changelog.md CHANGELOG.md

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          branch: release/v${{ steps.version.outputs.new_version }}
          title: 'chore: prepare release v${{ steps.version.outputs.new_version }}'
          body: |
            Automated release preparation for v${{ steps.version.outputs.new_version }}

            This PR was created automatically by the release workflow. It:
            1. Bumps the version to v${{ steps.version.outputs.new_version }}
            2. Updates the CHANGELOG.md

            Please review the changes and merge when ready.
          draft: ${{ github.event.inputs.draft }}

  build-and-push:
    needs: prepare-release
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: release/v${{ needs.prepare-release.outputs.new_version }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGES_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=v${{ needs.prepare-release.outputs.new_version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ needs.prepare-release.outputs.new_version }}
            type=sha,prefix=sha-

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
